C L "main" 0 23 1 "FUNCTION"
D G "__PCM__" 0 49 ""5.048""
D G "__DEVICE__" 0 49 "84"
D G "__DATE__" 0 49 ""23-Set.-16""
D G "__TIME__" 0 49 ""14:16:45""
D G "_UNICODE" 0 49 ""?"" "WEB        :  WWW.MIKROINGENIERIA.COM                                       //"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 35 ""
v L "value" 1 35 "int8" `53 
f B "set_tris_a" 1 35 "void(int8 value)" `52 
f N "set_tris_b" 1 36 ""
v L "value" 1 36 "int8" `55 
f B "set_tris_b" 1 36 "void(int8 value)" `54 
f N "get_tris_a" 1 37 ""
f B "get_tris_a" 1 37 "int8()" `56 
f N "get_tris_b" 1 38 ""
f B "get_tris_b" 1 38 "int8()" `57 
f N "output_a" 1 39 ""
v L "value" 1 39 "int8" `59 
f B "output_a" 1 39 "void(int8 value)" `58 
f N "output_b" 1 40 ""
v L "value" 1 40 "int8" `61 
f B "output_b" 1 40 "void(int8 value)" `60 
f N "input_a" 1 41 ""
f B "input_a" 1 41 "int8()" `62 
f N "input_b" 1 42 ""
f B "input_b" 1 42 "int8()" `63 
f N "input_change_a" 1 43 ""
f B "input_change_a" 1 43 "int8()" `64 
f N "input_change_b" 1 44 ""
f B "input_change_b" 1 44 "int8()" `65 
f N "port_b_pullups" 1 45 ""
v L "value" 1 45 "int8" `67 
f B "port_b_pullups" 1 45 "void(int8 value)" `66 
f N "input" 1 46 ""
v L "pin" 1 46 "int16" `69 
f B "input" 1 46 "int8(int16 pin)" `68 
f N "input_state" 1 47 ""
v L "pin" 1 47 "int16" `71 
f B "input_state" 1 47 "int8(int16 pin)" `70 
f N "output_low" 1 48 ""
v L "pin" 1 48 "int16" `73 
f B "output_low" 1 48 "void(int16 pin)" `72 
f N "output_high" 1 49 ""
v L "pin" 1 49 "int16" `75 
f B "output_high" 1 49 "void(int16 pin)" `74 
f N "output_toggle" 1 50 ""
v L "pin" 1 50 "int16" `77 
f B "output_toggle" 1 50 "void(int16 pin)" `76 
f N "output_bit" 1 51 ""
v L "pin" 1 51 "int16" `79 
v L "level" 1 51 "int8" `80 
f B "output_bit" 1 51 "void(int16 pin,int8 level)" `78 
f N "output_float" 1 52 ""
v L "pin" 1 52 "int16" `82 
f B "output_float" 1 52 "void(int16 pin)" `81 
f N "output_drive" 1 53 ""
v L "pin" 1 53 "int16" `84 
f B "output_drive" 1 53 "void(int16 pin)" `83  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 57 "40"
d G "PIN_A1" 1 58 "41"
d G "PIN_A2" 1 59 "42"
d G "PIN_A3" 1 60 "43"
d G "PIN_A4" 1 61 "44"
d G "PIN_B0" 1 63 "48"
d G "PIN_B1" 1 64 "49"
d G "PIN_B2" 1 65 "50"
d G "PIN_B3" 1 66 "51"
d G "PIN_B4" 1 67 "52"
d G "PIN_B5" 1 68 "53"
d G "PIN_B6" 1 69 "54"
d G "PIN_B7" 1 70 "55"
d G "FALSE" 1 73 "0"
d G "TRUE" 1 74 "1"
d G "BYTE" 1 76 "int8"
d G "BOOLEAN" 1 77 "int1"
d G "getc" 1 79 "getch"
d G "fgetc" 1 80 "getch"
d G "getchar" 1 81 "getch"
d G "putc" 1 82 "putchar"
d G "fputc" 1 83 "putchar"
d G "fgets" 1 84 "gets"
d G "fputs" 1 85 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 90 ""
f B "restart_cause" 1 90 "int8()" `85 
f N "reset_cpu" 1 91 ""
f B "reset_cpu" 1 91 "void()" `86 
f N "sleep" 1 92 ""
f B "sleep" 1 92 "void()" `87  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 94 "3"
d G "WDT_TIMEOUT" 1 95 "11"
d G "MCLR_FROM_SLEEP" 1 96 "16"
d G "MCLR_FROM_RUN" 1 97 "27"
d G "NORMAL_POWER_UP" 1 98 "27"
d G "BROWNOUT_RESTART" 1 99 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 107 ""
v L "mode" 1 107 "int8" `89 
f B "setup_timer_0" 1 107 "void(int8 mode)" `88 
f N "set_timer0" 1 108 ""
v L "value" 1 108 "int8" `91 
f B "set_timer0" 1 108 "void(int8 value)" `90 
f N "get_timer0" 1 109 ""
f B "get_timer0" 1 109 "int8()" `92 
f N "setup_counters" 1 110 ""
v L "mode" 1 110 "int8" `94 
v L "prescaler" 1 110 "int8" `95 
f B "setup_counters" 1 110 "void(int8 mode,int8 prescaler)" `93 
f N "set_rtcc" 1 111 ""
v L "value" 1 111 "int8" `97 
f B "set_rtcc" 1 111 "void(int8 value)" `96 
f N "get_rtcc" 1 112 ""
f B "get_rtcc" 1 112 "int8()" `98  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 114 "0"
d G "T0_EXT_L_TO_H" 1 115 "32"
d G "T0_EXT_H_TO_L" 1 116 "48"
d G "T0_DIV_1" 1 118 "8"
d G "T0_DIV_2" 1 119 "0"
d G "T0_DIV_4" 1 120 "1"
d G "T0_DIV_8" 1 121 "2"
d G "T0_DIV_16" 1 122 "3"
d G "T0_DIV_32" 1 123 "4"
d G "T0_DIV_64" 1 124 "5"
d G "T0_DIV_128" 1 125 "6"
d G "T0_DIV_256" 1 126 "7"
d G "T0_8_BIT" 1 129 "0"
d G "RTCC_INTERNAL" 1 131 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 132 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 133 "48"
d G "RTCC_DIV_1" 1 134 "8"
d G "RTCC_DIV_2" 1 135 "0"
d G "RTCC_DIV_4" 1 136 "1"
d G "RTCC_DIV_8" 1 137 "2"
d G "RTCC_DIV_16" 1 138 "3"
d G "RTCC_DIV_32" 1 139 "4"
d G "RTCC_DIV_64" 1 140 "5"
d G "RTCC_DIV_128" 1 141 "6"
d G "RTCC_DIV_256" 1 142 "7"
d G "RTCC_8_BIT" 1 143 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 154 ""
v L "mode" 1 154 "int16" `100 
f B "setup_wdt" 1 154 "void(int16 mode)" `99 
f N "restart_wdt" 1 155 ""
f B "restart_wdt" 1 155 "void()" `101  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 158 "8"
d G "WDT_36MS" 1 159 "9"
d G "WDT_72MS" 1 160 "10"
d G "WDT_144MS" 1 161 "11"
d G "WDT_288MS" 1 162 "12"
d G "WDT_576MS" 1 163 "13"
d G "WDT_1152MS" 1 164 "14"
d G "WDT_2304MS" 1 165 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "abs" 1 173 ""
v L "x" 1 173 "sint8" `103 
f B "abs" 1 173 "sint8(sint8 x)" `102 
f N "abs" 1 174 ""
v L "x" 1 174 "sint16" `105 
f G "abs" 1 174 "sint16(sint16 x)" `104 
f N "abs" 1 175 ""
v L "x" 1 175 "sint32" `107 
f G "abs" 1 175 "sint32(sint32 x)" `106 
f N "abs" 1 176 ""
v L "x" 1 176 "float" `109 
f G "abs" 1 176 "float(float x)" `108 
f N "_mul" 1 177 ""
v L "??65535" 1 177 "int8" `111 
v L "??65535" 1 177 "int8" `112 
f B "_mul" 1 177 "int16(int8 ,int8 )" `110 
f N "_mul" 1 178 ""
v L "??65535" 1 178 "sint8" `111 
v L "??65535" 1 178 "sint8" `115 
f G "_mul" 1 178 "sint16(sint8 ,sint8 )" `113 
f N "_mul" 1 179 ""
v L "??65535" 1 179 "int16" `111 
v L "??65535" 1 179 "int16" `118 
f G "_mul" 1 179 "int32(int16 ,int16 )" `116 
f N "_mul" 1 180 ""
v L "??65535" 1 180 "sint16" `111 
v L "??65535" 1 180 "sint16" `121 
f G "_mul" 1 180 "sint32(sint16 ,sint16 )" `119  "Memory Manipulation Prototypes:"
f N "read_bank" 1 183 ""
v L "bank" 1 183 "int8" `123 
v L "offset" 1 183 "int8" `124 
f B "read_bank" 1 183 "int8(int8 bank,int8 offset)" `122 
f N "write_bank" 1 184 ""
v L "bank" 1 184 "int8" `126 
v L "offset" 1 184 "int8" `127 
v L "value" 1 184 "int8" `128 
f B "write_bank" 1 184 "void(int8 bank,int8 offset,int8 value)" `125 
f N "strcpy" 1 185 ""
v L "dest" 1 185 "*int8" `130 
v L "src" 1 185 "*int8" `131 
f B "strcpy" 1 185 "void(*int8 dest,*int8 src)" `129 
f N "memset" 1 186 ""
v L "destination" 1 186 "*int8" `133 
v L "value" 1 186 "int8" `134 
v L "num" 1 186 "int16" `135 
f B "memset" 1 186 "void(*int8 destination,int8 value,int16 num)" `132 
f N "memcpy" 1 187 ""
v L "destination" 1 187 "*int8" `137 
v L "source" 1 187 "*int8" `138 
v L "num" 1 187 "int16" `139 
f B "memcpy" 1 187 "void(*int8 destination,*int8 source,int16 num)" `136  "String Prototypes:"
f N "toupper" 1 190 ""
v L "cvalue" 1 190 "int8" `141 
f B "toupper" 1 190 "int8(int8 cvalue)" `140 
f N "tolower" 1 191 ""
v L "cvalue" 1 191 "int8" `143 
f B "tolower" 1 191 "int8(int8 cvalue)" `142 
f N "sprintf" 1 192 ""
v L "string" 1 192 "*int8" `145 
v L "cstring" 1 192 "*int8" `146 
f B "sprintf" 1 192 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `144  "Data Manipulators Prototypes:"
f N "shift_left" 1 195 ""
v L "address" 1 195 "*int8" `149 
v L "bytes" 1 195 "int8" `150 
v L "value" 1 195 "int8" `151 
f B "shift_left" 1 195 "int8(*int8 address,int8 bytes,int8 value)" `148 
f N "shift_right" 1 196 ""
v L "address" 1 196 "*int8" `153 
v L "bytes" 1 196 "int8" `154 
v L "value" 1 196 "int8" `155 
f B "shift_right" 1 196 "int8(*int8 address,int8 bytes,int8 value)" `152 
f N "rotate_left" 1 197 ""
v L "address" 1 197 "*int8" `157 
v L "bytes" 1 197 "int8" `158 
f B "rotate_left" 1 197 "void(*int8 address,int8 bytes)" `156 
f N "rotate_right" 1 198 ""
v L "address" 1 198 "*int8" `160 
v L "bytes" 1 198 "int8" `161 
f B "rotate_right" 1 198 "void(*int8 address,int8 bytes)" `159 
f N "swap" 1 199 ""
v L "value" 1 199 "int8" `163 
f B "swap" 1 199 "void(int8 value)" `162 
f N "make8" 1 200 ""
v L "var" 1 200 "int16" `165 
v L "offset" 1 200 "int8" `166 
f B "make8" 1 200 "int8(int16 var,int8 offset)" `164 
f N "make8" 1 201 ""
v L "var" 1 201 "int32" `165 
v L "offset" 1 201 "int8" `169 
f G "make8" 1 201 "int8(int32 var,int8 offset)" `167 
f N "make16" 1 202 ""
v L "varhigh" 1 202 "int8" `171 
v L "varlow" 1 202 "int8" `172 
f B "make16" 1 202 "int16(int8 varhigh,int8 varlow)" `170 
f N "make32" 1 203 ""
v L "var1" 1 203 "int16" `174 
f B "make32" 1 203 "int32(int16 var1)" `173 
f N "make32" 1 204 ""
v L "var1" 1 204 "int16" `176 
v L "var2" 1 204 "int16" `177 
f G "make32" 1 204 "int32(int16 var1,int16 var2)" `175 
f N "make32" 1 205 ""
v L "var1" 1 205 "int16" `176 
v L "var2" 1 205 "int8" `180 
f G "make32" 1 205 "int32(int16 var1,int8 var2)" `178 
f N "make32" 1 206 ""
v L "var1" 1 206 "int16" `182 
v L "var2" 1 206 "int8" `183 
v L "var3" 1 206 "int8" `184 
f G "make32" 1 206 "int32(int16 var1,int8 var2,int8 var3)" `181 
f N "make32" 1 207 ""
v L "var1" 1 207 "int8" `186 
f G "make32" 1 207 "int32(int8 var1)" `185 
f N "make32" 1 208 ""
v L "var1" 1 208 "int8" `176 
v L "var2" 1 208 "int8" `189 
f G "make32" 1 208 "int32(int8 var1,int8 var2)" `187 
f N "make32" 1 209 ""
v L "var1" 1 209 "int8" `182 
v L "var2" 1 209 "int8" `183 
v L "var3" 1 209 "int8" `193 
f G "make32" 1 209 "int32(int8 var1,int8 var2,int8 var3)" `190 
f N "make32" 1 210 ""
v L "var1" 1 210 "int8" `195 
v L "var2" 1 210 "int8" `196 
v L "var3" 1 210 "int8" `197 
v L "var4" 1 210 "int8" `198 
f G "make32" 1 210 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `194 
f N "make32" 1 211 ""
v L "var1" 1 211 "int8" `176 
v L "var2" 1 211 "int16" `201 
f G "make32" 1 211 "int32(int8 var1,int16 var2)" `199 
f N "make32" 1 212 ""
v L "var1" 1 212 "int8" `182 
v L "var2" 1 212 "int16" `183 
v L "var3" 1 212 "int8" `205 
f G "make32" 1 212 "int32(int8 var1,int16 var2,int8 var3)" `202 
f N "make32" 1 213 ""
v L "var1" 1 213 "int8" `182 
v L "var2" 1 213 "int8" `183 
v L "var3" 1 213 "int16" `209 
f G "make32" 1 213 "int32(int8 var1,int8 var2,int16 var3)" `206 
f N "bit_set" 1 214 ""
v L "var" 1 214 "int8" `211 
v L "bit" 1 214 "int8" `212 
f B "bit_set" 1 214 "void(int8 var,int8 bit)" `210 
f N "bit_set" 1 215 ""
v L "var" 1 215 "int16" `211 
v L "bit" 1 215 "int8" `215 
f G "bit_set" 1 215 "void(int16 var,int8 bit)" `213 
f N "bit_set" 1 216 ""
v L "var" 1 216 "int32" `211 
v L "bit" 1 216 "int8" `218 
f G "bit_set" 1 216 "void(int32 var,int8 bit)" `216 
f N "bit_clear" 1 217 ""
v L "var" 1 217 "int8" `220 
v L "bit" 1 217 "int8" `221 
f B "bit_clear" 1 217 "void(int8 var,int8 bit)" `219 
f N "bit_clear" 1 218 ""
v L "var" 1 218 "int16" `220 
v L "bit" 1 218 "int8" `224 
f G "bit_clear" 1 218 "void(int16 var,int8 bit)" `222 
f N "bit_clear" 1 219 ""
v L "var" 1 219 "int32" `220 
v L "bit" 1 219 "int8" `227 
f G "bit_clear" 1 219 "void(int32 var,int8 bit)" `225 
f N "bit_test" 1 220 ""
v L "var" 1 220 "int8" `229 
v L "bit" 1 220 "int8" `230 
f B "bit_test" 1 220 "int8(int8 var,int8 bit)" `228 
f N "bit_test" 1 221 ""
v L "var" 1 221 "int16" `229 
v L "bit" 1 221 "int8" `233 
f G "bit_test" 1 221 "int8(int16 var,int8 bit)" `231 
f N "bit_test" 1 222 ""
v L "var" 1 222 "int32" `229 
v L "bit" 1 222 "int8" `236 
f G "bit_test" 1 222 "int8(int32 var,int8 bit)" `234  "#use delay() Prototypes:"
f N "delay_cycles" 1 225 ""
v L "count" 1 225 "int8" `238 
f B "delay_cycles" 1 225 "void(int8 count)" `237 
f N "delay_ms" 1 226 ""
v L "time" 1 226 "int16" `240 
f B "delay_ms" 1 226 "void(int16 time)" `239 
f N "delay_us" 1 227 ""
v L "time" 1 227 "int16" `242 
f B "delay_us" 1 227 "void(int16 time)" `241  "#use rs232() Prototypes:"
f N "putchar" 1 230 ""
v L "cdata" 1 230 "int8" `244 
f B "putchar" 1 230 "void(int8 cdata)" `243 
f N "putchar" 1 231 ""
v L "cdata" 1 231 "int8" `246 
v L "stream" 1 231 "int8" `247 
f G "putchar" 1 231 "void(int8 cdata,int8 stream)" `245 
f N "puts" 1 232 ""
v L "string" 1 232 "*int8" `249 
f B "puts" 1 232 "void(*int8 string)" `248 
f N "puts" 1 233 ""
v L "string" 1 233 "*int8" `251 
v L "stream" 1 233 "int8" `252 
f G "puts" 1 233 "void(*int8 string,int8 stream)" `250 
f N "getch" 1 234 ""
f B "getch" 1 234 "int8()" `253 
f N "getch" 1 235 ""
v L "stream" 1 235 "int8" `255 
f G "getch" 1 235 "int8(int8 stream)" `254 
f N "gets" 1 236 ""
v L "string" 1 236 "*int8" `257 
f B "gets" 1 236 "void(*int8 string)" `256 
f N "gets" 1 237 ""
v L "string" 1 237 "*int8" `259 
v L "stream" 1 237 "int8" `260 
f G "gets" 1 237 "void(*int8 string,int8 stream)" `258 
f N "kbhit" 1 238 ""
f B "kbhit" 1 238 "int8()" `261 
f N "kbhit" 1 239 ""
v L "stream" 1 239 "int8" `263 
f G "kbhit" 1 239 "int8(int8 stream)" `262 
f N "printf" 1 240 ""
v L "string" 1 240 "*int8" `265 
f B "printf" 1 240 "void(*int8 string,*int8 _VA_LIST)" `264 
f N "fprintf" 1 241 ""
v L "stream" 1 241 "int8" `268 
v L "string" 1 241 "*int8" `269 
f B "fprintf" 1 241 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `267 
f N "putc_send" 1 242 ""
f B "putc_send" 1 242 "void()" `271 
f N "fputc_send" 1 243 ""
v L "stream" 1 243 "int8" `273 
f B "fputc_send" 1 243 "void(int8 stream)" `272 
f N "rcv_buffer_full" 1 244 ""
f B "rcv_buffer_full" 1 244 "int8()" `274 
f N "rcv_buffer_full" 1 245 ""
v L "stream" 1 245 "int8" `276 
f G "rcv_buffer_full" 1 245 "int8(int8 stream)" `275 
f N "rcv_buffer_bytes" 1 246 ""
f B "rcv_buffer_bytes" 1 246 "int16()" `277 
f N "rcv_buffer_bytes" 1 247 ""
v L "stream" 1 247 "int8" `279 
f G "rcv_buffer_bytes" 1 247 "int16(int8 stream)" `278 
f N "tx_buffer_full" 1 248 ""
f B "tx_buffer_full" 1 248 "int8()" `280 
f N "tx_buffer_full" 1 249 ""
v L "stream" 1 249 "int8" `282 
f G "tx_buffer_full" 1 249 "int8(int8 stream)" `281 
f N "tx_buffer_bytes" 1 250 ""
f B "tx_buffer_bytes" 1 250 "int16()" `283 
f N "tx_buffer_bytes" 1 251 ""
v L "stream" 1 251 "int8" `285 
f G "tx_buffer_bytes" 1 251 "int16(int8 stream)" `284  "#use i2c() Prototypes:"
f N "i2c_read" 1 254 ""
f B "i2c_read" 1 254 "int8()" `286 
f N "i2c_read" 1 255 ""
v L "stream" 1 255 "int8" `288 
f G "i2c_read" 1 255 "int8(int8 stream)" `287 
f N "i2c_read" 1 256 ""
v L "stream" 1 256 "int8" `290 
v L "ack" 1 256 "int8" `291 
f G "i2c_read" 1 256 "int8(int8 stream,int8 ack)" `289 
f N "i2c_write" 1 257 ""
v L "data" 1 257 "int8" `293 
f B "i2c_write" 1 257 "int8(int8 data)" `292 
f N "i2c_write" 1 258 ""
v L "stream" 1 258 "int8" `295 
v L "data" 1 258 "int8" `296 
f G "i2c_write" 1 258 "int8(int8 stream,int8 data)" `294 
f N "i2c_start" 1 259 ""
f B "i2c_start" 1 259 "void()" `297 
f N "i2c_start" 1 260 ""
v L "stream" 1 260 "int8" `299 
f G "i2c_start" 1 260 "void(int8 stream)" `298 
f N "i2c_start" 1 261 ""
v L "stream" 1 261 "int8" `301 
v L "restart" 1 261 "int8" `302 
f G "i2c_start" 1 261 "void(int8 stream,int8 restart)" `300 
f N "i2c_stop" 1 262 ""
f B "i2c_stop" 1 262 "void()" `303 
f N "i2c_stop" 1 263 ""
v L "stream" 1 263 "int8" `305 
f G "i2c_stop" 1 263 "void(int8 stream)" `304 
f N "i2c_isr_state" 1 264 ""
f B "i2c_isr_state" 1 264 "int8()" `306 
f N "i2c_slaveaddr" 1 265 ""
v L "addr" 1 265 "int8" `308 
f B "i2c_slaveaddr" 1 265 "void(int8 addr)" `307 
f N "i2c_slaveaddr" 1 266 ""
v L "stream" 1 266 "int8" `310 
v L "addr" 1 266 "int8" `311 
f G "i2c_slaveaddr" 1 266 "void(int8 stream,int8 addr)" `309 
f N "i2c_poll" 1 267 ""
f B "i2c_poll" 1 267 "int8()" `312 
f N "i2c_poll" 1 268 ""
v L "stream" 1 268 "int8" `314 
f G "i2c_poll" 1 268 "int8(int8 stream)" `313 
f N "i2c_init" 1 269 ""
v L "baud" 1 269 "int32" `316 
f B "i2c_init" 1 269 "void(int32 baud)" `315 
f N "i2c_init" 1 270 ""
v L "stream" 1 270 "int8" `318 
v L "baud" 1 270 "int32" `319 
f G "i2c_init" 1 270 "void(int8 stream,int32 baud)" `317  "#use spi() Prototypes:"
f N "spi_xfer" 1 273 ""
f B "spi_xfer" 1 273 "int8()" `320 
f N "spi_xfer" 1 274 ""
f G "spi_xfer" 1 274 "int16()" `321 
f N "spi_xfer" 1 275 ""
f G "spi_xfer" 1 275 "int32()" `322 
f N "spi_xfer" 1 276 ""
v L "data" 1 276 "int8" `324 
f G "spi_xfer" 1 276 "int8(int8 data)" `323 
f N "spi_xfer" 1 277 ""
v L "data" 1 277 "int16" `326 
f G "spi_xfer" 1 277 "int16(int16 data)" `325 
f N "spi_xfer" 1 278 ""
v L "data" 1 278 "int32" `328 
f G "spi_xfer" 1 278 "int32(int32 data)" `327 
f N "spi_xfer" 1 279 ""
v L "stream" 1 279 "int8" `330 
v L "data" 1 279 "int8" `331 
f G "spi_xfer" 1 279 "int8(int8 stream,int8 data)" `329 
f N "spi_xfer" 1 280 ""
v L "stream" 1 280 "int8" `330 
v L "data" 1 280 "int16" `334 
f G "spi_xfer" 1 280 "int16(int8 stream,int16 data)" `332 
f N "spi_xfer" 1 281 ""
v L "stream" 1 281 "int8" `330 
v L "data" 1 281 "int32" `337 
f G "spi_xfer" 1 281 "int32(int8 stream,int32 data)" `335 
f N "spi_xfer" 1 282 ""
v L "stream" 1 282 "int8" `339 
v L "data" 1 282 "int8" `340 
v L "bits" 1 282 "int8" `341 
f G "spi_xfer" 1 282 "int8(int8 stream,int8 data,int8 bits)" `338 
f N "spi_xfer" 1 283 ""
v L "stream" 1 283 "int8" `339 
v L "data" 1 283 "int16" `340 
v L "bits" 1 283 "int8" `345 
f G "spi_xfer" 1 283 "int16(int8 stream,int16 data,int8 bits)" `342 
f N "spi_xfer" 1 284 ""
v L "stream" 1 284 "int8" `339 
v L "data" 1 284 "int32" `340 
v L "bits" 1 284 "int8" `349 
f G "spi_xfer" 1 284 "int32(int8 stream,int32 data,int8 bits)" `346 
f N "spi_init" 1 285 ""
v L "baud" 1 285 "int32" `351 
f B "spi_init" 1 285 "void(int32 baud)" `350 
f N "spi_init" 1 286 ""
v L "stream" 1 286 "int8" `353 
v L "baud" 1 286 "int32" `354 
f G "spi_init" 1 286 "void(int8 stream,int32 baud)" `352 
f N "spi_speed" 1 287 ""
v L "baud" 1 287 "int32" `356 
f B "spi_speed" 1 287 "void(int32 baud)" `355 
f N "spi_speed" 1 288 ""
v L "stream" 1 288 "int8" `358 
v L "baud" 1 288 "int32" `359 
f G "spi_speed" 1 288 "void(int8 stream,int32 baud)" `357 
f N "spi_speed" 1 289 ""
v L "stream" 1 289 "int8" `361 
v L "baud" 1 289 "int32" `362 
v L "clock" 1 289 "int32" `363 
f G "spi_speed" 1 289 "void(int8 stream,int32 baud,int32 clock)" `360 
f N "spi_prewrite" 1 290 ""
v L "data" 1 290 "int8" `365 
f B "spi_prewrite" 1 290 "void(int8 data)" `364 
f N "spi_prewrite" 1 291 ""
v L "data" 1 291 "int16" `367 
f G "spi_prewrite" 1 291 "void(int16 data)" `366 
f N "spi_prewrite" 1 292 ""
v L "data" 1 292 "int32" `369 
f G "spi_prewrite" 1 292 "void(int32 data)" `368 
f N "spi_prewrite" 1 293 ""
v L "??65535" 1 293 "int8" `371 
v L "data" 1 293 "int8" `372 
f G "spi_prewrite" 1 293 "void(int8 ,int8 data)" `370 
f N "spi_prewrite" 1 294 ""
v L "??65535" 1 294 "int8" `371 
v L "data" 1 294 "int16" `375 
f G "spi_prewrite" 1 294 "void(int8 ,int16 data)" `373 
f N "spi_prewrite" 1 295 ""
v L "??65535" 1 295 "int8" `371 
v L "data" 1 295 "int32" `378 
f G "spi_prewrite" 1 295 "void(int8 ,int32 data)" `376 
f N "spi_xfer_in" 1 296 ""
f B "spi_xfer_in" 1 296 "int8()" `379 
f N "spi_xfer_in" 1 297 ""
f G "spi_xfer_in" 1 297 "int16()" `380 
f N "spi_xfer_in" 1 298 ""
f G "spi_xfer_in" 1 298 "int32()" `381 
f N "spi_xfer_in" 1 299 ""
v L "bits" 1 299 "int8" `383 
f G "spi_xfer_in" 1 299 "int8(int8 bits)" `382 
f N "spi_xfer_in" 1 300 ""
v L "bits" 1 300 "int8" `385 
f G "spi_xfer_in" 1 300 "int16(int8 bits)" `384 
f N "spi_xfer_in" 1 301 ""
v L "bits" 1 301 "int8" `387 
f G "spi_xfer_in" 1 301 "int32(int8 bits)" `386 
f N "spi_xfer_in" 1 302 ""
v L "stream" 1 302 "int8" `389 
v L "bits" 1 302 "int8" `390 
f G "spi_xfer_in" 1 302 "int8(int8 stream,int8 bits)" `388 
f N "spi_xfer_in" 1 303 ""
v L "stream" 1 303 "int8" `389 
v L "bits" 1 303 "int8" `393 
f G "spi_xfer_in" 1 303 "int16(int8 stream,int8 bits)" `391 
f N "spi_xfer_in" 1 304 ""
v L "stream" 1 304 "int8" `389 
v L "bits" 1 304 "int8" `396 
f G "spi_xfer_in" 1 304 "int32(int8 stream,int8 bits)" `394  "#use rtos() Prototypes:"
f N "rtos_run" 1 307 ""
f B "rtos_run" 1 307 "void()" `397 
f N "rtos_yield" 1 308 ""
f B "rtos_yield" 1 308 "void()" `398 
f N "rtos_enable" 1 309 ""
v L "task" 1 309 "int8" `400 
f B "rtos_enable" 1 309 "void(int8 task)" `399 
f N "rtos_disable" 1 310 ""
v L "task" 1 310 "int8" `402 
f B "rtos_disable" 1 310 "void(int8 task)" `401 
f N "rtos_terminate" 1 311 ""
f B "rtos_terminate" 1 311 "void()" `403 
f N "rtos_await" 1 312 ""
v L "flag" 1 312 "int8" `405 
f B "rtos_await" 1 312 "void(int8 flag)" `404 
f N "rtos_wait" 1 313 ""
v L "sem" 1 313 "int8" `407 
f B "rtos_wait" 1 313 "void(int8 sem)" `406 
f N "rtos_signal" 1 314 ""
v L "sem" 1 314 "int8" `409 
f B "rtos_signal" 1 314 "void(int8 sem)" `408 
f N "rtos_msg_send" 1 315 ""
v L "task" 1 315 "int8" `411 
v L "msg" 1 315 "int8" `412 
f B "rtos_msg_send" 1 315 "void(int8 task,int8 msg)" `410 
f N "rtos_msg_read" 1 316 ""
f B "rtos_msg_read" 1 316 "int8()" `413 
f N "rtos_msg_poll" 1 317 ""
f B "rtos_msg_poll" 1 317 "int8()" `414 
f N "rtos_overrun" 1 318 ""
v L "task" 1 318 "int8" `416 
f B "rtos_overrun" 1 318 "int8(int8 task)" `415 
f N "rtos_stats" 1 319 ""
v L "task" 1 319 "int8" `418 
v L "stat" 1 319 "*int8" `419 
f B "rtos_stats" 1 319 "void(int8 task,*int8 stat)" `417  "#use timer() Prototypes:"
f N "get_ticks" 1 322 ""
f B "get_ticks" 1 322 "int8()" `420 
f N "get_ticks" 1 323 ""
f G "get_ticks" 1 323 "int16()" `421 
f N "get_ticks" 1 324 ""
f G "get_ticks" 1 324 "int32()" `422 
f N "get_ticks" 1 325 ""
v L "stream" 1 325 "int8" `424 
f G "get_ticks" 1 325 "int8(int8 stream)" `423 
f N "get_ticks" 1 326 ""
v L "stream" 1 326 "int8" `426 
f G "get_ticks" 1 326 "int16(int8 stream)" `425 
f N "get_ticks" 1 327 ""
v L "stream" 1 327 "int8" `428 
f G "get_ticks" 1 327 "int32(int8 stream)" `427 
f N "set_ticks" 1 328 ""
v L "value" 1 328 "int8" `430 
f B "set_ticks" 1 328 "void(int8 value)" `429 
f N "set_ticks" 1 329 ""
v L "value" 1 329 "int16" `432 
f G "set_ticks" 1 329 "void(int16 value)" `431 
f N "set_ticks" 1 330 ""
v L "value" 1 330 "int32" `434 
f G "set_ticks" 1 330 "void(int32 value)" `433 
f N "set_ticks" 1 331 ""
v L "stream" 1 331 "int8" `436 
v L "value" 1 331 "int8" `437 
f G "set_ticks" 1 331 "void(int8 stream,int8 value)" `435 
f N "set_ticks" 1 332 ""
v L "stream" 1 332 "int8" `436 
v L "value" 1 332 "int16" `440 
f G "set_ticks" 1 332 "void(int8 stream,int16 value)" `438 
f N "set_ticks" 1 333 ""
v L "stream" 1 333 "int8" `436 
v L "value" 1 333 "int32" `443 
f G "set_ticks" 1 333 "void(int8 stream,int32 value)" `441  "#use pwm() Prototypes:"
f N "pwm_on" 1 336 ""
f B "pwm_on" 1 336 "void()" `444 
f N "pwm_on" 1 337 ""
v L "stream" 1 337 "int8" `446 
f G "pwm_on" 1 337 "void(int8 stream)" `445 
f N "pwm_off" 1 338 ""
f B "pwm_off" 1 338 "void()" `447 
f N "pwm_off" 1 339 ""
v L "stream" 1 339 "int8" `449 
f G "pwm_off" 1 339 "void(int8 stream)" `448 
f N "pwm_set_duty" 1 340 ""
v L "duty" 1 340 "int16" `451 
f B "pwm_set_duty" 1 340 "void(int16 duty)" `450 
f N "pwm_set_duty" 1 341 ""
v L "stream" 1 341 "int8" `453 
v L "duty" 1 341 "int16" `454 
f G "pwm_set_duty" 1 341 "void(int8 stream,int16 duty)" `452 
f N "pwm_set_duty_percent" 1 342 ""
v L "percent" 1 342 "int16" `456 
f B "pwm_set_duty_percent" 1 342 "void(int16 percent)" `455 
f N "pwm_set_duty_percent" 1 343 ""
v L "stream" 1 343 "int8" `458 
v L "percent" 1 343 "int16" `459 
f G "pwm_set_duty_percent" 1 343 "void(int8 stream,int16 percent)" `457 
f N "pwm_set_frequency" 1 344 ""
v L "frequency" 1 344 "int32" `461 
f B "pwm_set_frequency" 1 344 "void(int32 frequency)" `460 
f N "pwm_set_frequency" 1 345 ""
v L "stream" 1 345 "int8" `463 
v L "frequency" 1 345 "int32" `464 
f G "pwm_set_frequency" 1 345 "void(int8 stream,int32 frequency)" `462  "#use capture() Prototypes:"
f N "get_capture_time" 1 348 ""
f B "get_capture_time" 1 348 "int16()" `465 
f N "get_capture_time" 1 349 ""
v L "stream" 1 349 "int8" `467 
f G "get_capture_time" 1 349 "int16(int8 stream)" `466 
f N "get_capture_event" 1 350 ""
f B "get_capture_event" 1 350 "int8()" `468 
f N "get_capture_event" 1 351 ""
v L "stream" 1 351 "int8" `470 
f G "get_capture_event" 1 351 "int8(int8 stream)" `469  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 364 ""
v L "address" 1 364 "int16" `472 
f B "goto_address" 1 364 "void(int16 address)" `471 
f N "label_address" 1 365 ""
v L "label" 1 365 "int16" `474 
f B "label_address" 1 365 "int16(int16 label)" `473  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 372 "int8" `475 
f N "read_eeprom" 1 375 ""
v L "address" 1 375 "__EEADDRESS__" `477 
f B "read_eeprom" 1 375 "int8(__EEADDRESS__ address)" `476 
f N "write_eeprom" 1 376 ""
v L "address" 1 376 "__EEADDRESS__" `479 
v L "value" 1 376 "int8" `480 
f B "write_eeprom" 1 376 "void(__EEADDRESS__ address,int8 value)" `478  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 383 ""
v L "interrupt" 1 383 "int32" `482 
f B "enable_interrupts" 1 383 "void(int32 interrupt)" `481 
f N "disable_interrupts" 1 384 ""
v L "interrupt" 1 384 "int32" `484 
f B "disable_interrupts" 1 384 "void(int32 interrupt)" `483 
f N "clear_interrupt" 1 385 ""
v L "interrupt" 1 385 "int32" `486 
f B "clear_interrupt" 1 385 "void(int32 interrupt)" `485 
f N "interrupt_active" 1 386 ""
v L "interrupt" 1 386 "int32" `488 
f B "interrupt_active" 1 386 "int8(int32 interrupt)" `487 
f N "interrupt_enabled" 1 387 ""
v L "interrupt" 1 387 "int32" `490 
f B "interrupt_enabled" 1 387 "int8(int32 interrupt)" `489 
f N "ext_int_edge" 1 388 ""
v L "source" 1 388 "int8" `492 
v L "edge" 1 388 "int8" `493 
f B "ext_int_edge" 1 388 "void(int8 source,int8 edge)" `491 
f N "jump_to_isr" 1 389 ""
v L "address" 1 389 "int16" `495 
f B "jump_to_isr" 1 389 "void(int16 address)" `494  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 391 "0x40"
d G "H_TO_L" 1 392 "0"
d G "GLOBAL" 1 394 "0x0B80"
d G "INT_RTCC" 1 395 "0x000B20"
d G "INT_RB" 1 396 "0x00FF0B08"
d G "INT_EXT_L2H" 1 397 "0x50000B10"
d G "INT_EXT_H2L" 1 398 "0x60000B10"
d G "INT_EXT" 1 399 "0x000B10"
d G "INT_EEPROM" 1 400 "0x000B40"
d G "INT_TIMER0" 1 401 "0x000B20"
C L "jump_to_isr" 0 23 1 "FUNCTION"
V G "i" 0 27 "int8" `500  "Definimos variable como entero"
F N "main" 0 29 ""
F G "main" 0 29 "void()" `501  "Iniciamos el programa principal"
C L "main" 0 23 1 "FUNCTION"
C L "main" 0 23 1 "FUNCTION"
C L "main" 0 23 1 "FUNCTION"
C L "main" 0 23 1 "FUNCTION"
C L "main" 0 23 1 "FUNCTION"
C L "main" 0 23 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_timer_0" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
