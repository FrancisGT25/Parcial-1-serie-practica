CCS PCM C Compiler, Version 5.048, 43599               23-Set.-16 14:16

               Filename:   E:\PROYECTOS CON MICROCONTROLADORES\Proyectos con Microcontroladores\3. MikroIngeniería - Proyectos con Microcontroladores\01. LED\LED2\CCS\LED2.lst

               ROM used:   48 words (5%)
                           Largest free fragment is 976
               RAM used:   6 (9%) at main() level
                           7 (10%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //WEB        :  WWW.MIKROINGENIERIA.COM                                       // 
.................... //                                                                            // 
.................... //TÍTULO     :  PROYECTOS CON MICROCONTROLADORES                              // 
.................... //                                                                            // 
.................... //PROYECTO   :  CONTADOR BINARIO DE 0 A 255                                   // 
.................... //                                                                            // 
.................... //AUTOR      :  MGTR. ING. BRYAM HUAMANCHUMO BACA                             // 
.................... //                                                                            // 
.................... //COMPILADOR :  CCS C COMPILER                                                // 
.................... //                                                                            // 
.................... //MICROCONTROLADOR :  PIC16F84A                                               // 
.................... //                                                                            // 
.................... //OSCILADOR        :  4MHz                                                    // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <16f84a.h>  // Incluimos el fichero del Microcontrolador PIC16f84A 
.................... //////////// Standard Header file for the PIC16F84A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F84A 
....................  
.................... #list 
....................  
....................  
.................... #fuses XT,NOWDT      // Definimos las palabras de configuración del PIC 
....................                      // XT(cristal 4MHz), No Watch Dog Timer 
....................  
.................... #use delay(clock=4000000)  // Definimos la Frecuencia del oscilador de PIC(4MHz) 
0004:  MOVLW  12
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   017
0009:  MOVLW  01
000A:  MOVWF  0D
000B:  CLRF   0C
000C:  DECFSZ 0C,F
000D:  GOTO   00C
000E:  DECFSZ 0D,F
000F:  GOTO   00B
0010:  MOVLW  4A
0011:  MOVWF  0C
0012:  DECFSZ 0C,F
0013:  GOTO   012
0014:  GOTO   015
0015:  DECFSZ 00,F
0016:  GOTO   009
0017:  GOTO   02A (RETURN)
....................  
.................... int i;                     // Definimos variable como entero 
....................  
.................... void main(void){             // Iniciamos el programa principal 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
....................  
....................    set_tris_b(0x00);         // Seteamos el puerto B como salida 
001B:  MOVLW  00
001C:  BSF    03.5
001D:  MOVWF  06
....................     
....................    do{                       // Iniciamos el bucle do ... While infinito 
....................     
....................      for(i=0; i<=255; ++i){  // Declaramos FOR incrementando de 0 a 255  
001E:  BCF    03.5
001F:  CLRF   10
....................       
....................       output_b(i);           // Salida por el puerto B, la variable "i" 
0020:  BSF    03.5
0021:  CLRF   06
0022:  BCF    03.5
0023:  MOVF   10,W
0024:  MOVWF  06
....................        
....................       delay_ms(500);         // Tiempo de espera de 500ms 
0025:  MOVLW  02
0026:  MOVWF  11
0027:  MOVLW  FA
0028:  MOVWF  12
0029:  GOTO   004
002A:  DECFSZ 11,F
002B:  GOTO   027
002C:  INCF   10,F
002D:  GOTO   020
....................        
....................      }                       // Termina la función FOR 
....................       
....................    }while(1);                // Termina el bucle do ... While infinito 
002E:  GOTO   01F
....................     
.................... }                            // Termina el programa principal 
....................  
002F:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
